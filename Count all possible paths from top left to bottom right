Count all possible paths from top left to bottom right (geeks for geeks problem)

long long int numberOfPaths(int m, int n){
        int dp[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
              if(i==0||j==0) 
                 dp[i][j]=1;
               else 
               dp[i][j]=(dp[i-1][j]+dp[i][j-1])%1000000007;
            }
        }
        return dp[m-1][n-1];
    }
Declare a 2D array dp of size m x n to store the dp values.

Initialize the first row and first column of the dp table to 1, since there is only one way to reach any cell in the first row or first column.

Compute the dp values for the remaining cells in the dp table using the following recurrence relation: dp[i][j] = dp[i-1][j] + dp[i][j-1].

Since the answer is the number of possible paths from the top-left cell to the bottom-right cell, the answer is the value in the bottom-right cell of the dp table. Therefore, we return dp[m-1][n-1] as the answer.

Note: We use % 1000000007 to ensure that the result is computed modulo 1000000007, as specified in the problem statement.
