https://www.hackerrank.com/challenges/the-time-in-words/problem
solution:string timeInWords(int h, int m) {
   string time;
    
    array<string, 30> number_word = {
        "one", "tow", "three", "four", "five",
        "six", "seven", "eight", "nine", "ten",
        "eleven", "twelve", "thirteen", "fourteen",
        "quarter", "sixteen", "seventeen", "eightteen", "nineteen",
        "twenty", "twenty one", "twenty two", "twenty three",
        "twenty four", "twenty five", "tweny six", "twenty seven",
        "twenty eight", "twenty nine", "half"
    };
    
    string intermediate_word = " minutes";
    if(m == 0) time = number_word[h-1] + " o' clock";
    else if(m == 1) time = number_word[m-1] + " minute past " + number_word[h-1];
        else if (m == 59) time = number_word[60-m-1] + " minute to " + number_word[h-1];
    else if(m <= 30){
        if (m == 15 || m == 30) intermediate_word = "";
        time = number_word[m-1] + intermediate_word + " past " + number_word[h-1];
    }
    else if(m > 30){
        if (m == 45) intermediate_word = "";
        time = number_word[59-(m)] + intermediate_word + " to " + number_word[h];
    } 
    
    return time;
}


explaination:This code takes in two integers, h and m, representing the hour and minute of a clock, respectively. It then converts the time into words, with the output being a string representation of the time in words.

The code uses an array of strings, number_word, which contains the words for the numbers 1-29, as well as "quarter", "half", and the numbers 31-59 in reverse order. It then uses conditional statements to determine the appropriate string representation of the time based on the input hour and minute values.

If the minute value m is 0, it will output the time as "<hour> o' clock". If m is 1, it will output the time as "one minute past <hour>". If m is 59, it will output the time as "one minute to <next hour>".

For all other values of m, it will check if m is less than or equal to 30. If it is, it will output the time as "<m> minutes past <hour>". If m is exactly 15 or 30, the output will omit the "minute" and only say "<m> past <hour>". If m is greater than 30, it will output the time as "<60-m> minutes to <next hour>". If m is exactly 45, the output will omit the "minute" and only say "<60-m> to <next hour>".

The resulting string is stored in the time variable and is returned by the function.
